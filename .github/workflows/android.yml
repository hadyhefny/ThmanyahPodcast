name: Android CI

# Trigger the workflow on pull requests to main and develop branches
on:
  pull_request:
  workflow_dispatch:
    inputs:
      release_notes:
        type: string
        required: true
        default: "Manual Android Build"
        description: "Release Notes"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract versionCode
        id: extract_version_code
        run: |
          # Extract versionCode
          VERSION_CODE=$(grep -oP 'versionCode \K\d+' app/build.gradle)
          echo "VERSION_CODE=${VERSION_CODE}" >> $GITHUB_ENV

      - name: Modify versionCode
        id: modify_version_code
        run: |
          # Modify versionCode
          NEW_VERSION_CODE=$((VERSION_CODE + 1))
          echo "NEW_VERSION_CODE=${NEW_VERSION_CODE}" >> $GITHUB_ENV
          echo "New version code: ${NEW_VERSION_CODE}"

          # Update versionCode in build.gradle
          sed -i "s/versionCode [0-9]\+/versionCode ${NEW_VERSION_CODE}/" app/build.gradle

      - name: Verify changes
        run: |
          # Print updated versionCode from build.gradle
          grep 'versionCode' app/build.gradle

      - name: Determine Branch Name
        id: get_branch_name
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add app/build.gradle
          git commit -m "Automatically updated versioning: ${{ env.NEW_VERSION_CODE }}"
          git push origin HEAD:${{ env.BRANCH_NAME }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub automatically provides this token to authenticate push
          
#      - name: Configure Git user
#        run: |
#          git config --global user.name "GitHub Action"
#          git config --global user.email "actions@github.com"
#
#      - name: Commit changes
#        run: |
#          git add app/build.gradle
#          git commit -m "Update versionCode to ${VERSION_CODE} from GitHub Actions"
#
#      - name: Push changes
#        run: git push
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub automatically provides this token to authenticate push

#      - name: Determine Release Notes
#        id: release_notes
#        run: |
#          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
#            echo "RELEASE_NOTES=${{ inputs.release_notes }}" >> $GITHUB_ENV
#          else
#            echo "RELEASE_NOTES=${{ github.event.pull_request.title }}$'\n'${{ github.event.pull_request.body }}" >> $GITHUB_ENV
#          fi
#        shell: bash
#
#      - name: Print Release Notes
#        run: |
#          echo "Release Notes:"
#          echo ${{ env.RELEASE_NOTES }}

#      # Step 2: Set up JDK (Java 11 or 17 depending on your Android project setup)
#      - name: Set up JDK
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'zulu'  # You can also use 'adopt' or 'temurin'
#          java-version: '17'    # Or '17' if your project uses Java 17
#
#      # Step 3: Cache Gradle dependencies to speed up builds
#      - name: Cache Gradle packages
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            gradle-${{ runner.os }}-
#
#      # Step 4: Set up the Android SDK
#      - name: Set up Android SDK
#        uses: android-actions/setup-android@v3
#
#      # Step 5: Build the Android project
#      - name: Build with Gradle
#        run: ./gradlew build
